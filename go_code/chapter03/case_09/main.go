package main

import "fmt"

func main()  {
	// Golang 中没有专门的字符类型，如果要存储单个字符(字符)，一般使用 byte 来保存
	// 字符串就是一串固定长度的字符连接起来的字符序列。
	// Golang 的字符串是由单个字节连接起来，也就是说传统字符串是由字符组成的，而 Golang 的字符串不同，它是由字节组成的。
	var c1 byte = 'a'
	var c2 byte = '0' // 字符的 0
	// 当我们直接输出 byte 值，就是输出了的对应的字符的码值
	// 'a' ==> 97
	fmt.Println("c1 =", c1)
	fmt.Println("c2 =", c2)
	// 如果我们希望输出对应字符，需要使用格式化输出
	fmt.Printf("c1 = %c c2 = %c \n", c1, c2)
	// var c3 byte = '北' // '北' 对应码值超出范围
	var c3 = '北'
	fmt.Printf("c3 = %c c3 对应码值 = %d c3 的类型 %T\n", c3, c3, c3)
	var c4 int = '北'
	fmt.Printf("c4 = %c c4 对应码值 = %d c4 的类型 %T\n", c4, c4, c4)
	// 如果我们保存的字符在 ASCII 表中，比如[0-1, a-z,A-Z...]，直接可以保存到 byte
	// 如果我们保存的字符对应的码值大于 255，这时我们可以考虑使用 int 类型保存
	// 如果我们需要按照字符的方式输出，这时我们需要格式化输出
	/*
		字符类型的使用细节
	1. 字符常量是用单引号('')括起来的单个字符。
	2. Go 中允许使用转义字符 '\' 来将其后的字符转为特殊字符常量
	3. Go 语言的字符使用 UTF-8 编码，英文字母：1 个字节；汉字：3个字节
	4. 在 Go 中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8 编码的码值
	5. 可以直接给某个变量赋一个数字，然后按格式化输出时 %c，会输出该数字对应的 unicode 字
	6. 字符型是可以进行运算的，相当于一个整数，因为它都对应的 Unicode 码
	*/
	var c5 int = 22269 // 22269 -> '国'
	fmt.Printf("c5 = %c \n", c5)
	var c6 int = 120 // 120 -> 'x'
	fmt.Printf("c6 = %c \n", c6)
	// 字符类型是可以进行运算的，相当于一个整数，运输时是按照码值运行
	var n1 = 10 + 'a'
	fmt.Println("n1 =", n1)
	/*
		字符类型本质探讨
	1. 字符型存储到计算机中，需要将字符对应的的码值(整数)找出来
	2. 存储：字符-->对应码值-->二进制-->存储
	3. 读取：二进制-->码值-->字符-->读取
	4. 字符和码值的对应关系是通过字符编码表决定的(是规定好的)
	5. Go 语言的编码都统一成了 UTF-8，非常方便，在没有编码乱码的困扰了
	*/
}


